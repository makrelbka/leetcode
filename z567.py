class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        l = 0
        r = 0
        arr = set(s1)
        cnt = {}
        for i in s1:
            cnt[i] = 1 + cnt.get(i, 0)
        while r < len(s1) and r < len(s2):
            if s2[r] in arr:
                cnt[s2[r]] = cnt.get(s2[r], 0) - 1
                if cnt[s2[r]] == 0:
                    cnt.pop(s2[r])
            if cnt == {}:
                return True
            r+=1
        
        while r < len(s2):
            if s2[r] in arr:
                cnt[s2[r]] = cnt.get(s2[r], 0) - 1
                if cnt[s2[r]] == 0:
                    cnt.pop(s2[r])
            if s2[l] in arr:
                cnt[s2[l]] = cnt.get(s2[l], 0) + 1
                if cnt[s2[l]] == 0:
                    cnt.pop(s2[l])
            if cnt == {}:
                return True
            
            l+=1
            r+=1
                
                
        return False
    

"""
Permutation in String
Нам нужен сет встречающихся букв, чтобы проверять есть ли буква в нужно нам строке
Нам нужна мапа для подсчета вхождений букв 
И два указателя для движения по строке 
Сначала пройдемся по строке один, собрав мапу для необходимых букв 
И сет для вхождений получим из первой строки 
Далее пойдем по второй и если будем встречать нужную букву правым указателем то уменьшаем ее количество в мапе, если левым то увелчим
Если значение в мапе стало 0, удалим элемент (можно заменить на счетчик)
И если мапа пустая, значит все буквы из первой строки есть во второй и в нужном количестве
"""